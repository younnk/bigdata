# 문제 2번 ==== 

train = read.csv("data/exam2-2_train.csv")
test = read.csv("data/exam2-2_test.csv")
y_test = read.csv("data/exam2-2_y_test.csv")



# 풀이
# 1. 라이브러리 및 데이터 확인 ----
library(dplyr)        # 데이터 전처리
library(caret)        # 머신러닝 모델링 및 성능평가
library(randomForest) # 랜덤포레스트 모델링
library(ModelMetrics) # 모델 성능평가


# 2. 데이터 탐색(EDA) ----

# 초기 데이터 확인
print(train %>% head(3))
print(test %>% head(3))

# 데이터의 행/열 확인
print(train %>% dim())
print(test %>% dim())

# 데이터 구조 확인(변수명과 데이터 타입, 행/열 등)
print(train %>% str())
print(test %>% str())

# 결측치 확인
print(colSums(is.na(train)))
print(colSums(is.na(test)))


# train 과 test 데이터의 기초통계량(독립변수)을 잘 비교해보세요. 
print(train %>% summary())  
print(test %>% summary())


# y데이터(종속변수)도 구체적으로 살펴보세요. 
print(train$target %>% summary())



# 3. 데이터 전처리 및 분리 ----

# 1) 결측치, 2) 이상치, 3) 변수 처리하기

# 3.1 결측치 처리----
print(sum(is.na(train)))
print(sum(is.na(test)))

print(colSums(is.na(train)))
print(colSums(is.na(test)))


# 결측치 대체
# 대체 : ifelse(조건, 조건일 때, 아닐 때) 활용

# age 변수
med_age <- median(train$age, na.rm = TRUE)
train$age <- ifelse(is.na(train$age), 
                            med_age, 
                            train$age)
test$age <- ifelse(is.na(test$age), 
                    med_age, 
                    test$age)

# 대체여부 확인
print(sum(is.na(train)))
print(sum(is.na(test)))


# 3.3 변수처리 ----
# cust_id 는 학습시 불필요한 변수이므로 제거
# 나중에 제출 양식에 필요하기 때문에 별도로 저장하기
train = train %>% select(-cust_id)

cust_id = test$cust_id
test = test %>% select(-cust_id)


# 3.4 데이터 분리 ----
# 데이터를 train / validation set 으로 분리 
# (80% 훈련, 20% 검증용)
library(caret)

df = train     # 데이터 복사 
set.seed(2024) # 랜덤시드고정
idx <- createDataPartition(df$target, p = 0.8, list = F)
# createDataPartition 대소문자 주의 

train = df[idx, ]
val = df[-idx, ]

# 데이터 수 확인
print(train %>% dim())
print(val %>% dim())


# 4. 모델링 및 성능평가 ----
library(randomForest)

# 랜덤포레스트 모델 사용
# 주의 : 분류모형일 경우 y값은 범주형(factor) 이어야 함
print(train %>% str())
set.seed(2023)
model = randomForest(target ~ . , data = train)
print(model)


y_pred = predict(model)
print(mse(train$target, y_pred))
caret::R2(train$target, y_pred)


# 모델을 사용하여 테스트 데이터 예측
x_val = val %>% select(-target)
y_pred = predict(model, x_val)
print(y_pred %>% head())


# 모델 성능 평가 (R-squared, MSE 등)
library(ModelMetrics)

# R-squared 값 
print( caret::R2(val$target, y_pred) ) # caret 패키지 활용
print( cor(val$target, y_pred)**2 )    # 상관계수 제곱

# MSE 값(mean squared error)
print(mse(val$target, y_pred))       # ModelMetrics::mse(actual, predicted)
print(mean((val$target-y_pred)**2) ) # 직접구하기


# 실제 test 셋 평가하기
# 모델을 사용하여 실제 test 데이터 예측
y_pred_test = predict(model, test)
print(y_pred_test %>% head())

# R-squared 값 
print( caret::R2(y_test$target, y_pred_test) ) # caret 패키지 활용
print( cor(y_test$target, y_pred_test)**2 )    # 상관계수 제곱


# 5.1 예측값 구하기

# 모델을 사용하여 테스트 데이터 예측
y_result = predict(model, test)
# y_result = predict(model, newdata = test)
print(y_result)


# 5.2 csv파일 제출하기
# 주의 : 문제에서 주어진 조건 꼼꼼하게 확인할 것!
result = data.frame(cust_id, y_result)
colnames(result)<-c("cust_id", "target")
print(result %>% head())
write.csv(result, "result.csv",row.names = FALSE)

# ★tip : 데이터를 저장한다음 불러와서 제대로 제출했는지 확인해보자
# write.csv(result, "result.csv",row.names = FALSE)
df2 = read.csv("result.csv")
print(df2)

